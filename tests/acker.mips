
.data

this_function_message: .asciiz "This function computes the Ackerman Function A(m,n)\n"
enter_m_message: .asciiz "Enter m: "
enter_n_message: .asciiz "Enter n: "

.text
main:
    # print(this_function_message)
    la $a0, this_function_message
    jal print_asciiz

    # print(enter_m_message)
    la $a0, enter_m_message
    jal print_asciiz

    # $s0 = read_int()
    jal read_int
    move $s0, $v0

    # print(enter_n_message)
    la $a0, enter_n_message
    jal print_asciiz

    # $s1 = read_int()
    jal read_int
    move $s1, $v0

    # acker($s0, $s1)
    move $a0, $s0
    move $a1, $s1
    jal acker


    # print_int($v0)
    move $a0, $v0
    jal print_int
    # print_char '\n'
    li $a0, 10
    li $v0, 11
    syscall

exit:
    li $v0, 10
    syscall


# int acker(int m >= 0, int n >= 0)
#  acker 0 n = n + 1
#  acker m 0 = acker(m - 1, 1)
#  acker m n = acker(m - 1, acker(m, n - 1))
acker:
 acker__0_n:
    # if (m == 0)
    bne $a0, $zero, acker__mk_stk
    # no stack needed
    # return n + 1
    addi $v0, $a1, 1
    jr $ra

 acker__mk_stk: # make stack space
    addi $sp, $sp, -12 # stack[3] = {
    sw $s0, 8($sp)     #     $s0,
    sw $s1, 4($sp)     #     &s1,
    sw $ra, 0($sp)     #     $ra};
    move $s0, $a0 # int m;
    move $s1, $a1 # int n;

 acker__m_0: # //return acker(m - 1, 1);
    bne $s1, $zero, acker__m_n # if (n == 0)
    addi $a0, $s0, -1  #   args = {m - 1,
    addi $a1, $zero, 1 #           1};
    jal acker          #   $v0 = acker(args);
    j acker__dl_stk    #   return $v0;

 acker__m_n: # // return acker(m - 1, acker(m, n - 1));
    addi $a1, $s1, -1 # args = {m, n - 1};
    jal acker         # $v0 = acker(args);
    addi $a0, $s0, -1 # args = {m - 1,
    move $a1, $v0     #         $v0};
    jal acker         # $v0 = acker(args);
    # return $v0;

 acker__dl_stk: # delete stack space
    lw $s0, 8($sp) # restore $a0
    lw $s1, 4($sp) # restore $s0
    lw $ra, 0($sp) # restore $ra
    addi $sp, $sp, 12 # free stack

    jr $ra # return


print_asciiz:
    # make stack space
    addi $sp, $sp, -8 # stack[2] = {
    sw $s0, 4($sp)    #     $s0,
    sw $ra, 0($sp)    #     $ra};
    move $s0, $a0     # int cursor;

 print_asciiz__loop:
     # if ((c = *cursor) == '\0') break;
    lb $t0, 0($s0)
    beq $t0, $zero, print_asciiz__dl_stk
    # print_character(c);
    li $v0, 11
    move $a0, $t0
    syscall
    # cursor++;
    addi $s0, $s0, 1
    j print_asciiz__loop

 print_asciiz__dl_stk:
    # delete stack space
    lw $s0, 4($sp)   # restore $s0
    lw $ra, 0($sp)   # restore $ra
    addi $sp, $sp, 8 # free stack

    jr $ra # return


.data
# allow 20 chars to be read at a time. the bounds are unchecked. oh well.
read_int__buffer: .ascii "01234567890123456789"

.text
read_int:
    # make stack space
    addi $sp, $sp, -8 # stack[2] = {
    sw $s0, 4($sp)    #     $s0,
    sw $ra, 0($sp)    #     $ra};

    # char * end_cursor = buffer;
    la $s0, read_int__buffer

 read_int__read_loop:
    # c = read_character()
    li $v0, 12
    syscall
    move $t0, $v0

    # if (c == '\n') break;
    li $t1, 10
    beq $t0, $t1, read_int__read_break

    # *(end_cursor++) = c;
    sb $t0, 0($s0)
    addi $s0, $s0, 1
    j read_int__read_loop

 read_int__read_break:
     # end_cursor--;
    addi $s0, $s0, -1

     # stupid windows line endings.
    # if (*end_cursor == '\r') end_cursor--;
    lb $t0, 0($s0)
    li $t1, 13
    bne $t0, $t1, read_int__after_windows_check
    addi $s0, $s0, -1
 read_int__after_windows_check:

    # int value = 0;
    li $t0, 0
    # char * cursor = buffer;
    la $t1, read_int__buffer
    # int _10 = 10;
    li $t2, 10

 read_int__value_loop:
    # value *= 10
    mul $t0, $t0, $t2
    # int digit = (*cursor) - '0'
    lb $t4, 0($t1)
    addi $t4, $t4, -48
    # value += digit
    add $t0, $t0, $t4
    # if (cursor == end_cursor) break;
    beq $t1, $s0, read_int__value_break
    # cursor++;
    addi $t1, $t1, 1
    j read_int__value_loop

 read_int__value_break:
    # return value;
    move $v0, $t0
    # delete stack space
    lw $s0, 4($sp)   # restore $s0
    lw $ra, 0($sp)   # restore $ra
    addi $sp, $sp, 8 # free stack
    jr $ra


print_int:
    # make stack space
    addi $sp, $sp, -8 # stack[2] = {
    sw $s0, 4($sp)    #     $s0,
    sw $ra, 0($sp)    #     $ra};
    # int value = $a0;
    move $s0, $a0

    # bool must_print = false;
    li $t0, 0
    # int factor = 1000000000;
    li $t1, 1000000000
    # const int _10 = 10;
    li $t3, 10

 print_int__loop:
    # digit = value / factor;
    # value = value % factor;
    div $s0, $t1
    mflo $t2
    mfhi $s0
    # if (must_print || digit != 0)
    bne $t0, $zero, print_int__print_digit
    beq $t2, $zero, print_int__done_printing
  print_int__print_digit:
    # print_character(digit + '0')
    li $v0, 11
    addi $a0, $t2, 48
    syscall
    # must_print = true
    li $t0, 1

  print_int__done_printing:
    # factor = factor / 10;
    div $t1, $t3
    mflo $t1
    # if (factor != 0) continue; else break;
    bne $t1, $zero, print_int__loop

    # delete stack space
    lw $s0, 4($sp)   # restore $s0
    lw $ra, 0($sp)   # restore $ra
    addi $sp, $sp, 8 # free stack
    jr $ra

