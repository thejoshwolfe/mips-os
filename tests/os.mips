
# coprocessor0:
#  $2: interrupt handler
#  $4: LO
#  $5: HI
#  $9: clock
#  $11: next timer interrupt
#  $14: EPC - pc just before interrupt


# task state
.data
    # either 0 or 4
    kernel__task_index: .word 0
    # tasks are interlaced
    kernel__register_stash: .word 0:64


# entrypoint and init
.text
main:
    # register interrupt handler
    la $k0, interrupt_handler
    mtc0 $2, $k0


    # load up each task with an initial state
    la $k0, kernel__register_stash

    # init $pc
    la $k1, task1__main
    sw $k1, 248($k0)
    la $k1, task2__main
    sw $k1, 252($k0)

    # init $sp
    li $k1, 0xf0000000
    sw $k1, 208($k0)
    li $k1, 0xe0000000
    sw $k1, 212($k0)


    # start one of the tasks
    j kernel__load_and_start_task

# interrupt handler
interrupt_handler:
    # get the current task index
    la $k0, kernel__task_index
    lw $k1, 0($k0)

    # stash non-kernel registers
    la $k0, kernel__register_stash
    add $k0, $k0, $k1
    # skip $zero
    sw $1, 0($k0)
    sw $2, 8($k0)
    sw $3, 16($k0)
    sw $4, 24($k0)
    sw $5, 32($k0)
    sw $6, 40($k0)
    sw $7, 48($k0)
    sw $8, 56($k0)
    sw $9, 64($k0)
    sw $10, 72($k0)
    sw $11, 80($k0)
    sw $12, 88($k0)
    sw $13, 96($k0)
    sw $14, 104($k0)
    sw $15, 112($k0)
    sw $16, 120($k0)
    sw $17, 128($k0)
    sw $18, 136($k0)
    sw $19, 144($k0)
    sw $20, 152($k0)
    sw $21, 160($k0)
    sw $22, 168($k0)
    sw $23, 176($k0)
    sw $24, 184($k0)
    sw $25, 192($k0)
    # skip $k0-$k1
    sw $28, 200($k0)
    sw $29, 208($k0)
    sw $30, 216($k0)
    sw $31, 224($k0)

    # stash other registers
    mflo $k1
    sw $k1, 232($k0)
    mfhi $k1
    sw $k1, 240($k0)
    # get previous pc from coprocessor0
    mfc0 $k1, $14
    sw $k1, 248($k0)

    # toggle task index
    la $k0, kernel__task_index
    lw $k1, 0($k0)
    xori $k1, $k1, 4
    sw $k1, 0($k0)



    # load a task
    kernel__load_and_start_task:

    # Set next timer interrupt.

    # calculate the extra time we need before we jump back to user code
    la $k0, kernel__jump_back
    la $k1, kernel__clock_get
    sub $k0, $k0, $k1
    srl $k0, $k0, 2
    addi $k0, $k0, 1
    # user gets this many clock cycles at a time
    addi $k0, $k0, 1000
    kernel__clock_get: mfc0 $k1, $9
    add $k0, $k0, $k1
    mtc0 $11, $k0


    # load the new context

    # get the new pointer
    la $k0, kernel__task_index
    lw $k0, 0($k0)
    la $k1, kernel__register_stash
    add $k0, $k0, $k1

    # restore non-kernel registers
    # skip $zero
    lw $1, 0($k0)
    lw $2, 8($k0)
    lw $3, 16($k0)
    lw $4, 24($k0)
    lw $5, 32($k0)
    lw $6, 40($k0)
    lw $7, 48($k0)
    lw $8, 56($k0)
    lw $9, 64($k0)
    lw $10, 72($k0)
    lw $11, 80($k0)
    lw $12, 88($k0)
    lw $13, 96($k0)
    lw $14, 104($k0)
    lw $15, 112($k0)
    lw $16, 120($k0)
    lw $17, 128($k0)
    lw $18, 136($k0)
    lw $19, 144($k0)
    lw $20, 152($k0)
    lw $21, 160($k0)
    lw $22, 168($k0)
    lw $23, 176($k0)
    lw $24, 184($k0)
    lw $25, 192($k0)
    # skip $k0-$k1
    lw $28, 200($k0)
    lw $29, 208($k0)
    lw $30, 216($k0)
    lw $31, 224($k0)

    # restore other registers
    lw $k1, 232($k0)
    mtc0 $4, $k1
    lw $k1, 240($k0)
    mtc0 $5, $k1

    # return to user code
    lw $k1, 248($k0)
    kernel__jump_back: jr $k1

kernel__exit:
    li $v0, 10
    syscall


# user code

task1__main:
    # print_numbers(1, 10)
    li $a0, 1
    li $a1, 10
    jal print_numbers

    # exit()
    jal kernel__exit

task2__main:
    # print_numbers(2, 10)
    li $a0, 2
    li $a1, 10
    jal print_numbers

    # exit()
    jal kernel__exit



# this function prints lines of text
# void print_numbers(int task_number, int count)

.data
    print_numbers__first: .asciiz "task "
    print_numbers__second: .asciiz " iteration "
    print_numbers__third: .asciiz "\n"
.text

print_numbers:
    # make stack
    addi $sp, $sp, -16
    sw $s0, 12($sp)
    sw $s1, 8($sp)
    sw $s2, 4($sp)
    sw $ra, 0($sp)
    move $s0, $a0 # int task_number
    move $s1, $a1 # int count
    li $s2, 0     # int i = 0

 print_numbers__loop:
    # while (i < count)
    bge $s2, $s1, print_numbers__break

    # print_asciiz(first)
    la $a0, print_numbers__first
    jal print_asciiz

    # print_int(task_number)
    move $a0, $s0
    jal print_int

    # print_asciiz(second)
    la $a0, print_numbers__second
    jal print_asciiz

    # print_int(i)
    move $a0, $s2
    jal print_int

    # print_asciiz(third)
    la $a0, print_numbers__third
    jal print_asciiz

    # i++
    addi $s2, $s2, 1
    j print_numbers__loop

 print_numbers__break:
    # free stack
    lw $s0, 12($sp)
    lw $s1, 8($sp)
    lw $s2, 4($sp)
    lw $ra, 0($sp)
    addi $sp, $sp, 16
    jr $ra


print_asciiz:
    # make stack space
    addi $sp, $sp, -8 # stack[2] = {
    sw $s0, 4($sp)    #     $s0,
    sw $ra, 0($sp)    #     $ra};
    move $s0, $a0     # int cursor;

 print_asciiz__loop:
    # if ((c = *cursor) == '\0') break;
    lb $t0, 0($s0)
    beq $t0, $zero, print_asciiz__dl_stk
    # print_character(c);
    li $v0, 11
    move $a0, $t0
    syscall
    # cursor++;
    addi $s0, $s0, 1
    j print_asciiz__loop

 print_asciiz__dl_stk:
    # delete stack space
    lw $s0, 4($sp)   # restore $s0
    lw $ra, 0($sp)   # restore $ra
    addi $sp, $sp, 8 # free stack

    jr $ra # return


print_int:
    # check for zero
    bne $a0, $zero, print_int__normal
    # print_character(0)
    li $v0, 11
    li $a0, 48
    syscall
    # return
    jr $ra

 print_int__normal:
    # make stack space
    addi $sp, $sp, -8 # stack[2] = {
    sw $s0, 4($sp)    #     $s0,
    sw $ra, 0($sp)    #     $ra};
    # int value = $a0;
    move $s0, $a0

    # bool must_print = false;
    li $t0, 0
    # int factor = 1000000000;
    li $t1, 1000000000
    # const int _10 = 10;
    li $t3, 10

 print_int__loop:
    # digit = value / factor;
    # value = value % factor;
    div $s0, $t1
    mflo $t2
    mfhi $s0
    # if (must_print || digit != 0)
    bne $t0, $zero, print_int__print_digit
    beq $t2, $zero, print_int__done_printing
  print_int__print_digit:
    # print_character(digit + '0')
    li $v0, 11
    addi $a0, $t2, 48
    syscall
    # must_print = true
    li $t0, 1

  print_int__done_printing:
    # factor = factor / 10;
    div $t1, $t3
    mflo $t1
    # if (factor != 0) continue; else break;
    bne $t1, $zero, print_int__loop

    # delete stack space
    lw $s0, 4($sp)   # restore $s0
    lw $ra, 0($sp)   # restore $ra
    addi $sp, $sp, 8 # free stack
    jr $ra

